# 0-add_integer.txt

===========================
How to Use 0-add_integer.py
===========================

This module defines an integer addition function ``add_integer(a, b=98)``.



Usage
=====

``add_integer(...)``` returns the addition of its two arguments. For numbers,
that value is equivalent to using the ``+`` operator.

::

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(1, 2)
    3

::

    >>> add_integer(100, -2)
    98

::

    >>> add_integer(2)
    100

::

    >>> add_integer(100.3, -2)
    98



Additional Test Cases
=====================

# Testing with large integers
::

    >>> add_integer(999999999999999999999999999, 1)
    1000000000000000000000000098

# Testing with negative floats
::

    >>> add_integer(-5.5, -2.5)
    -7

# Testing with zero
::

    >>> add_integer(0, 42)
    42

# Testing with strings
::

    >>> add_integer("Hello", 6)
    Traceback (most recent call last):
    TypeError: a must be an integer or b must be an integer

::

    >>> add_integer(12, "World")
    Traceback (most recent call last):
    TypeError: b must be an integer

::

    >>> add_integer("Hello", "World")
    Traceback (most recent call last):
    TypeError: a must be an integer or b must be an integer

# Testing with infinity
::

    >>> add_integer(float('inf'), 42)
    Traceback (most recent call last):
    TypeError: a must be an integer or b must be an integer

::

    >>> add_integer(100, float('inf'))
    Traceback (most recent call last):
    TypeError: b must be an integer

# Testing with NaN
::

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

::

    >>> add_integer(10, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

# Testing with large negative integers
::

    >>> add_integer(-999999999999999999999999999, -1)
    -1000000000000000000000000099

# Testing with negative zero
::

    >>> add_integer(-0, 42)
    42

# Testing with positive and negative infinity
::

    >>> add_integer(float('-inf'), 42)
    Traceback (most recent call last):
    TypeError: a must be an integer or b must be an integer

::

    >>> add_integer(100, float('-inf'))
    Traceback (most recent call last):
    TypeError: b must be an integer
